---
title: "About programming in Base R"
format: html
editor: visual
---

# Task 1: Basic Vector practice

1. Create vectors for pre and post measures

```{r}
pre <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)
post <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)

```

2. Assign names

```{r}
attributes(pre)$names <- paste("Subject", 1:20, sep = "_")
attributes(post)$names <- paste("Subject", 1:20, sep = "_")

print(pre)
print(post)
```

3. Calculate change

```{r}
chng <- post - pre
chng
```

4. Average decrease in blood pressure across all patients

```{r}
average_value <- mean(chng)
average_value
```

5. which patients experienced a decrease in blood pressure after treatment

```{r}
pts_decreased_pressure <- which(chng>0)
attributes(pts_decreased_pressure)$names
```

6. Subset the vector of differences to only return those that have a positive change

```{r}
positive_chng <- chng[pts_decreased_pressure]
positive_chng
```
7. Calculate the average decrease in blood pressure for those where the blood pressure decreased (positive
change)

```{r}
average_positive_value <- mean(positive_chng)
average_positive_value
```


# Task 2: Basic Data Frame practice

1. Create a data frame object with four columns corresponding to your data above:

```{r}

my_df <- data.frame(patient = paste("Subject", 1:20, sep = "_"),
                    pre_bp= pre,
                    post_bp = post,
                    diff_bp = chng)

#set row names to seq numbers
attributes(my_df)$row.names <- 1:20

#print 
my_df

```

2. Return only rows where the diff_bp column is negative.

```{r}
my_df[my_df$diff_bp<0,]
#number of rows
dim(my_df[my_df$diff_bp<0,])[1]

# solution below I believe wouldn't give me full credit since we were supposed to use BaseR
#my_df |> 
#  subset(diff_bp < 0)
```

3. Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120.

```{r}
my_df$postbp_ls120 <- my_df$post_bp<120
my_df

# solution below I believe wouldn't give me full credit since we were supposed to use BaseR
#library(dplyr)
#my_df <- my_df |>
#  mutate(postbp_ls120 = post_bp<120)

```

4. print the data frame

```{r}
knitr::kable(my_df)
```

# Task 3: List 

1. Create new data frame

```{r}
pret <- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)
postt <- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)
diff_bp <- postt - pret
postbp_ls120 <- postt<120


new_df <- data.frame(patient = paste("Subject", 1:10, sep = "_"),
                     pre_bp = pret,
                     post_bp = postt,
                     diff_bp = diff_bp,
                     postbp_ls120 = postbp_ls120
                     )
new_df
```

2. List with two elements

```{r}
my_list <- list(treatment=my_df, placebo=new_df)
my_list
```

3. Access the first list element using three different types of syntax.

```{r}
#1st
my_list$treatment
#2nd
my_list[1]
#3rd
my_list[[1]]
```

4. In one line, access the placebo data frame, pre_bp column.

```{r}
my_list$placebo$pre_bp
```

# Task 4: Control Flow Practice

1. create a new column in each data frame from above called status (to the data frames that are stored in my list)

```{r}
my_list$treatment$status <- character(20)
my_list$placebo$status <- character(10)

my_list$treatment
my_list$placebo

```

2. For the non-placebo data frame (within the list), create a for loop and use if/then/else logic to create the status columnâ€™s values.

```{r}
for (i in 1:dim(my_list$treatment)[1]){
  
  if ( my_list$treatment$post_bp[[i]] <= 120 ){
    my_list$treatment$status[[i]] <- "optimal"
  } else if (my_list$treatment$post_bp[[i]] <= 130 ){
    my_list$treatment$status[[i]] <- "borderline"
  } else if (my_list$treatment$post_bp[[i]] > 130 ){
    my_list$treatment$status[[i]] <- "high"
  } else {
    "ERROR"
  }
}

my_list$treatment

```


3. Repeat for the placebo data frame (within the list).

```{r}

for (i in 1:dim(my_list$placebo)[1]){
  
  if ( my_list$placebo$post_bp[[i]] <= 120 ){
    my_list$placebo$status[[i]] <- "optimal"
  } else if (my_list$placebo$post_bp[[i]] <= 130 ){
    my_list$placebo$status[[i]] <- "borderline"
  } else if (my_list$placebo$post_bp[[i]] > 130 ){
    my_list$placebo$status[[i]] <- "high"
  } else {
    "ERROR"
  }
}

my_list$placebo

```

# Task 5: Function Writing

```{r}
my_function <- function(treatment, 
                        placebo, 
                        stat="mean"){
  #check if proper columns are numeric
  if(!is.numeric(treatment$pre_bp) | 
     !is.numeric(treatment$post_bp) |
     !is.numeric(treatment$diff_bp) |
     !is.numeric(placebo$pre_bp) |
     !is.numeric(placebo$post_bp) |
     !is.numeric(placebo$diff_bp)
     ){
    stop("Input data format error")
  } 
  
  #get needed function
  my_fun <- get(stat)
  
  #Finds the statistic of interest for both dfs and all columns
  a <- my_fun(my_list$treatment$pre_bp)
  b <- my_fun(my_list$treatment$post_bp)
  c <- my_fun(my_list$treatment$diff_bp)
  d <- my_fun(my_list$placebo$pre_bp)
  e <- my_fun(my_list$placebo$post_bp)
  f <- my_fun(my_list$placebo$diff_bp)
  
  #save everything as a list
  x <- list(a,b,c,d,e,f)
  #add names to the list elements
  attributes(x)$names <- paste(stat, 
                               c(rep("trt",3), rep("plc",3)),
                               rep(c("pre","post","diff"),2), 
                               sep = "_")
  
  #return list
  return(x)
}

my_function(my_list$treatment, my_list$placebo)
my_function(my_list$treatment, my_list$placebo, stat="var")
my_function(my_list$treatment, my_list$placebo, stat="max")
my_function(my_list$treatment, my_list$placebo, stat="min")
my_function(my_list$treatment, my_list$placebo, stat="sd")

```

